-- person
CREATE TABLE IF NOT EXISTS PERSON(
    PERSON_ID VARCHAR(4),
    FIRST_NAME VARCHAR(255) NOT NULL,
    MIDDLE_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255) NOT NULL,
    ADDRESS VARCHAR(255),
    GENDER VARCHAR(25),
    DATE_OF_BIRTH DATE,
    PRIMARY KEY(PERSON_ID),
    CHECK (REGEXP_LIKE(PERSON_ID, '^P[0-9][0-9][0-9]$'))
);
-- person_phone_number
CREATE TABLE IF NOT EXISTS PERSON_PHONE_NUMBER(
     PERSON_ID VARCHAR(4),
     PHONE_NUMBER VARCHAR(14) NOT NULL,
     PRIMARY KEY(PERSON_ID, PHONE_NUMBER),
     FOREIGN KEY(PERSON_ID) REFERENCES PERSON(PERSON_ID),
     UNIQUE(PHONE_NUMBER)
 );

CREATE TABLE IF NOT EXISTS AUTHOR (
AUTHOR_ID VARCHAR(15),
AUTHOR_NAME VARCHAR(255),
PERSON_ID VARCHAR(4) UNIQUE NOT NULL,
CHECK(REGEXP_LIKE(PERSON_ID, '^P[0-9][0-9][0-9]$')),
PRIMARY KEY(AUTHOR_ID),
FOREIGN KEY(PERSON_ID) REFERENCES PERSON(PERSON_ID));


CREATE TABLE IF NOT EXISTS LIBRARY_CARD (
CARD_ID VARCHAR(15),
DATE_OF_ISSUE DATE,
MEMBERSHIP_LEVEL VARCHAR(10) NOT NULL,
PRIMARY KEY(CARD_ID)); 

DELIMITER //

CREATE TRIGGER after_library_insert 
AFTER INSERT 
ON LIBRARY_CARD FOR EACH ROW
BEGIN
	IF NEW.MEMBERSHIP_LEVEL = 'GOLD' THEN
		INSERT INTO GOLD (GOLD_CARD_ID) 
		VALUES (NEW.CARD_ID);
	ELSE
		INSERT INTO SILVER (SILVER_CARD_ID) 
		VALUES (NEW.CARD_ID);
	END IF;
END//

DELIMITER ;


-- member
CREATE TABLE IF NOT EXISTS MEMBER(
    PERSON_ID VARCHAR(4),
    CARD_ID VARCHAR(15) NOT NULL,
    PRIMARY KEY(PERSON_ID),
    FOREIGN KEY(PERSON_ID) REFERENCES PERSON(PERSON_ID),
    FOREIGN KEY(CARD_ID) REFERENCES LIBRARY_CARD(CARD_ID)
);

-- employee
CREATE TABLE IF NOT EXISTS EMPLOYEE(
PERSON_ID VARCHAR(4),
START_DATE DATE NOT NULL,
DESIGNATION VARCHAR(25) NOT NULL,
PRIMARY KEY(PERSON_ID),
FOREIGN KEY(PERSON_ID) REFERENCES PERSON(PERSON_ID)
);

CREATE TABLE IF NOT EXISTS TRAINER(
    TRAINER_ID VARCHAR(8),
    EMPLOYEE_ID VARCHAR(4) NOT NULL,
	HOURS_OF_TRAINING INTEGER,
	DATE_STARTED DATE,
    UNIQUE(EMPLOYEE_ID),
    PRIMARY KEY(TRAINER_ID),
    FOREIGN KEY(EMPLOYEE_ID) REFERENCES PERSON(PERSON_ID)
);
-- receptionist
CREATE TABLE IF NOT EXISTS RECEPTIONIST(
    PERSON_ID VARCHAR(4),
    TRAINER_ID VARCHAR(8),
    PRIMARY KEY(PERSON_ID),
    FOREIGN KEY(PERSON_ID) REFERENCES EMPLOYEE(PERSON_ID),
    FOREIGN KEY(TRAINER_ID) REFERENCES TRAINER(TRAINER_ID)
);

CREATE TABLE IF NOT EXISTS LIBRARY_SUPERVISOR(
    PERSON_ID VARCHAR(4),
	TRAINER_ID VARCHAR(8),
    PRIMARY KEY(PERSON_ID),
    FOREIGN KEY(PERSON_ID) REFERENCES EMPLOYEE(PERSON_ID),
	FOREIGN KEY(TRAINER_ID) REFERENCES TRAINER(TRAINER_ID)
);

CREATE TABLE IF NOT EXISTS CATALOGING_MANAGER(
    PERSON_ID VARCHAR(4),
	TRAINER_ID VARCHAR(8),
    PRIMARY KEY(PERSON_ID),
    FOREIGN KEY(PERSON_ID) REFERENCES EMPLOYEE(PERSON_ID),
	FOREIGN KEY(TRAINER_ID) REFERENCES TRAINER(TRAINER_ID)
);
CREATE TABLE IF NOT EXISTS PAYMENT
(   
    PAYMENT_ID              VARCHAR(50)     NOT NULL,
    RECEPTIONIST_ID         VARCHAR(20)     NOT NULL,
    MEMBER_ID               VARCHAR(20)     NOT NULL,
    ISSUE_DATE              DATE            NULL,
    DUE_DATE                DATE GENERATED ALWAYS AS (ISSUE_DATE + INTERVAL 30 DAY) NULL,
    PAYMENT_METHOD          VARCHAR(20)     NULL,
    PAYMENT_TIME            DATETIME        NOT NULL,
    AMOUNT                  DECIMAL(10,2)   NOT NULL,
    
    PRIMARY KEY (PAYMENT_ID),
    FOREIGN KEY(RECEPTIONIST_ID) REFERENCES RECEPTIONIST(PERSON_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_ISSUE
(   
    BOOK_ID     VARCHAR(20)     NOT NULL,
    MEMBER_ID   VARCHAR(20)     NOT NULL,
    ISSUE_DATE  DATE        NOT NULL,
    PAYMENT_ID  VARCHAR(50)     NULL,
    PRIMARY KEY(BOOK_ID, MEMBER_ID, ISSUE_DATE),
    FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(PAYMENT_ID),
    FOREIGN KEY(MEMBER_ID) REFERENCES MEMBER(PERSON_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_CATALOG
(
    BOOK_ID     VARCHAR(20)     NOT NULL,
    DATE        DATE            NOT NULL,
    CATALOGING_MANAGER_ID   VARCHAR(20) NOT NULL,
    PRIMARY KEY(BOOK_ID, DATE)
);

CREATE TABLE IF NOT EXISTS BOOK_CATEGORY
(
    BOOK_ID     VARCHAR(20)     NOT NULL,
    CATEGORY    VARCHAR(20)     NOT NULL,
    PRIMARY KEY(BOOK_ID)
);

CREATE TABLE IF NOT EXISTS PUBLISHER
(
    PUBLISHER_ID         VARCHAR(20)    NOT NULL,
    PUBLISHER_NAME       VARCHAR(255)   NOT NULL,
    ADDRESS              VARCHAR(255)   NOT NULL,     
    EMAIL                VARCHAR(100)   NOT NULL,
    CONTACT              VARCHAR(14)    NOT NULL,
    PRIMARY KEY (PUBLISHER_ID)
);

CREATE TABLE IF NOT EXISTS BOOKS
(
    BOOK_ID         VARCHAR(20),
    BOOK_TITLE      VARCHAR(255)   NOT NULL,
    BOOK_EDITION    VARCHAR(50)    NOT NULL,     
    PUBLISHER_ID    VARCHAR(20)    NOT NULL,
    CATEGORY        VARCHAR(20)    NOT NULL,
    PRIMARY KEY (BOOK_ID),
    FOREIGN KEY(PUBLISHER_ID) REFERENCES PUBLISHER(PUBLISHER_ID)
);

CREATE TABLE IF NOT EXISTS WRITES_BOOK
(
    BOOK_ID     VARCHAR(20),
    AUTHOR_ID   VARCHAR(20),
    PRIMARY KEY (BOOK_ID, AUTHOR_ID),
    FOREIGN KEY(AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID),
    FOREIGN KEY(BOOK_ID)   REFERENCES BOOKS(BOOK_ID)
);

CREATE TABLE IF NOT EXISTS COMMENTS
(
    COMMENT_ID     VARCHAR(20),
    COMMENT_TIME   DATETIME      NOT NULL,
    COMMENT_TEXT   VARCHAR(255)     NULL,
    RATING_SCORE   INTEGER          NULL,
    PERSON_ID      VARCHAR(20)      NOT NULL,
    BOOK_ID        VARCHAR(20)      NOT NULL,
    PRIMARY KEY (COMMENT_ID),
    FOREIGN KEY (PERSON_ID) REFERENCES PERSON(PERSON_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    CHECK (RATING_SCORE <= 5)
);

CREATE TABLE IF NOT EXISTS SILVER(
SILVER_CARD_ID VARCHAR(15),
PRIMARY KEY(SILVER_CARD_ID),
FOREIGN KEY(SILVER_CARD_ID) REFERENCES LIBRARY_CARD(CARD_ID));

CREATE TABLE IF NOT EXISTS GOLD(
GOLD_CARD_ID VARCHAR(15),
PRIMARY KEY(GOLD_CARD_ID),
FOREIGN KEY(GOLD_CARD_ID) REFERENCES LIBRARY_CARD(CARD_ID));

CREATE TABLE IF NOT EXISTS GUEST_LOG (
GUEST_ID VARCHAR(15),
CARD_ID VARCHAR(15),
GUEST_NAME VARCHAR(255),
GUEST_ADDRESS VARCHAR(255),
GUEST_CONTACT VARCHAR(14),
PRIMARY KEY(GUEST_ID, CARD_ID),
FOREIGN KEY(CARD_ID) REFERENCES GOLD(GOLD_CARD_ID));

CREATE TABLE IF NOT EXISTS PROMOTION (
PROMOTION_CODE VARCHAR(15),
PROMOTION_DESCRIPTION VARCHAR(255),
PRIMARY KEY(PROMOTION_CODE));

CREATE TABLE IF NOT EXISTS LIBRARY_CODE_PROMOTIONS (
CARD_ID VARCHAR(15),
PROMOTION_CODE VARCHAR(15),
PRIMARY KEY (CARD_ID, PROMOTION_CODE),
FOREIGN KEY(PROMOTION_CODE) REFERENCES PROMOTION(PROMOTION_CODE));